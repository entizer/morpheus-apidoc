## Network Domains

Provides API for managing Network Domains.

## Get All Network Domains

```shell
curl "<%= shell_url %>/api/networks/domains"
  -H "Authorization: BEARER <%= shell_token %>"
```

> The above command returns JSON structured like this:

```json
{
  "networkDomains": [
    {
      "id": 2,
      "name": "mydomain.local",
      "active": true,
      "fqdn": null,
      "description": null,
      "visibility": "private",
      "domainController": false,
      "publicZone": false,
      "domainUsername": null,
      "domainPassword": null,
      "refType": null,
      "refId": null,
      "refSource": null,
      "internalId": null,
      "ouPath": null,
      "dcServer": null,
      "zoneType": null,
      "dnssec": null,
      "domainSerial": null,
      "account": {
        "id": 1,
        "name": "root"
      },
      "owner": {
        "id": 1,
        "name": "root"
      }
    }
  ],
  "meta": {
    "size": 1,
    "total": 1,
    "offset": 0,
    "max": 25
  }
}
```

This endpoint retrieves all Network Domains associated with the account.

### HTTP Request

`GET <%= api_url %>/api/networks/domains`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
name |  | If specified will return an exact match on name
phrase |  | If specified will return a partial match on name

## Get a Specific Network Domain


```shell
curl "<%= shell_url %>/api/networks/domains/1" \
  -H "Authorization: BEARER <%= shell_token %>"
```

> The above command returns JSON structured like this:

```json
{
  "networkDomain": {
    "id": 1,
    "name": "testdomain.xyz",
    "active": true,
    "fqdn": "testdomain.xyz.",
    "description": "an example domain",
    "visibility": "private",
    "domainController": false,
    "publicZone": false,
    "domainUsername": null,
    "domainPassword": null,
    "refType": "AccountIntegration",
    "refId": 18,
    "refSource": "integration",
    "internalId": null,
    "ouPath": null,
    "dcServer": null,
    "zoneType": "Authoritative",
    "dnssec": null,
    "domainSerial": null,
    "account": {
      "id": 1,
      "name": "root"
    },
    "owner": {
      "id": 1,
      "name": "root"
    }
  }
}
```

This endpoint retrieves a specific Network Domain.


### HTTP Request

`GET <%= api_url %>/api/networks/domains/:id`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the Network Domain to retrieve


## Create a Network Domain

```shell
curl -XPOST "http://<%= shell_url %>/api/networks/domains" \
  -H "Authorization: Bearer <%= shell_token %>" \
  -H "Content-Type: application/json" \
  -d '{
  "networkDomain": {
    "name": "test.xyz",
    "description": "A test domain"
  }
}'
```

> The above command returns JSON structured like getting a single Network Domain: 

### HTTP Request

`POST <%= api_url %>/api/networks/domains`

### JSON Parameters

Parameter | Default | Description
--------- | ------- | -----------
name |  | Name
description |  | Description
displayName |  | Overrides displayed name in domain selection components. Useful if using many OU Paths.
publicZone | false | Public Zone
taskSetId | | Workflow ID. Workflows can be applied to an instance when associated with a domain. Useful for custom domain related scripting. (Important if wanting to ensure the computer is removed from the domain using teardown phased workflows.) 
active | true | Active
domainController      | true | Join Domain Controller
domainUsername      | true | Domain Username
domainPassword      | true | Domain Password
dcServer |  | DC Server. If specified, must be the server name and not an IP Address. 
ouPath |  | OU Path.  (i.e. 'OU=staging,DC=ad,DC=yourdomain,DC=com')
guestUsername |  | Guest Username. If set, will change the instances RPC Service User after joining a Domain. 
guestPassword |  | Guest Password

## Update a Network Domain

```shell
curl -XPUT "<%= shell_url %>/api/networks/domains/:id" \
  -H "Authorization: BEARER <%= shell_token %>" \
  -H "Content-Type: application/json" \
  -d '{
  "networkDomain": {
    "description": "an excellent domain"
  }
}'
```

> The above command returns JSON structured like getting a single Network Domain: 

### HTTP Request

`PUT <%= api_url %>/api/networks/domains/:id`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the Network Domain

### JSON Parameters

Same as [Create](#create-a-network-domain).

## Delete a Network Domain

```shell
curl -XDELETE "<%= shell_url %>/api/networks/domains/:id" \
  -H "Authorization: BEARER <%= shell_token %>"
```

> The above command returns JSON Structured like this:

```json
{
  "success": true
}
```

Will delete a Network Domain from the system and make it no longer usable.

### HTTP Request

`DELETE <%= api_url %>/api/networks/domains/:id`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the Network Domain

